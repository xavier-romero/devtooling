---

- name: Copy the contract deployment files for geth
  ansible.builtin.copy:
    src: geth-contracts
    dest: "{{ work_dir }}"

- name: Deploy and call each of the geth contracts
  ansible.builtin.shell: |
    pushd {{ work_dir }} || exit 1
    find geth-contracts -type f -name '*.bin' | sort | while read -r contract; do
        timeout {{ cast_timeout }} cast send --legacy --from {{ eth_address }} --private-key {{ private_key }} --rpc-url {{ rpc_url }} -j --create \
            "$(cat $contract)" | jq '.' > out.tmp.json
        ret_code=$?
        if [[ $ret_code -ne 0 ]]; then
            echo "the contract $contract failed to deploy due to a {{ cast_timeout }}s timeout" >> {{ log_file }}
            continue
        fi

        timeout {{ cast_timeout }} cast send --legacy --gas-limit {{ max_block_size }} --private-key {{ private_key }} --rpc-url {{ rpc_url }} \
            "$(jq -r '.contractAddress' out.tmp.json)" -j "0xDEADBEEF" | jq '.' > $contract.run.json
        ret_code=$?
        if [[ $ret_code -ne 0 ]]; then
            echo "the contract $contract failed to execute due to a {{ cast_timeout }}s timeout" >> {{ log_file }}
            continue
        fi
        echo "$contract.run.json" >> {{ log_file }}
        cat $contract.run.json >> {{ log_file }}
    done
  args:
    executable: /bin/bash

- name: Deploy and call each of the geth contracts
  ansible.builtin.shell: |
    pushd {{ work_dir }}/geth-contracts || exit 1
    fail_count=$(cat *.json | jq -r 'select(.status != "0x1") | .transactionHash' | wc -l)
    if [[ $fail_count -gt 0 ]]; then
        echo "it looks like some geth-contracts failed to execute"
        exit 1
    fi
  args:
    executable: /bin/bash
  ignore_errors: true

- name: Add inscription to mark test end
  ansible.builtin.include_role:
    name: common
    tasks_from: clear_chain
  vars:
    inscription_message: Finished Geth Automated Tests
